#!/bin/bash
#
# Copyright 2006-2013 Joseph Block <jpb@apesseekingknowledge.net>

export GOPATH=~/gocode

# yes, these tests are ugly. They do however, work.
if [[ "$(uname -s)" == "Darwin" ]]; then
  # do OS X specific things
  alias eject="diskutil eject"
  alias flushdns="dscacheutil -flushcache"
  alias killSS='kill -9 `ps ww |grep ScreenSaverEngine |grep -v grep |awk "{print $1}"`'
  alias l-d="ls -lFaGd"
  alias l-h="ls -laFGh"
  alias l-l="ls -laFG"
  alias l="ls -laFG"
  alias ll="ls -lFa | TERM=vt100 less"
  # These assume you've installed memcached, mysql & postgresql with brew
  alias memcached_load="launchctl load -w /usr/local/Cellar/memcached/1.4.13/homebrew.mxcl.memcached.plist"
  alias memcached_unload="launchctl unload -w /usr/local/Cellar/memcached/1.4.13/homebrew.mxcl.memcached.plist"
  alias mysql_load="launchctl load -w /usr/local/Cellar/mysql/5.5.20/homebrew.mxcl.mysql.plist"
  alias mysql_unload="launchctl unload -w /usr/local/Cellar/mysql/5.5.20/homebrew.mxcl.mysql.plist"
  alias postgres_load="launchctl load -w /usr/local/Cellar/postgresql/9.1.3/homebrew.mxcl.postgresql.plist"
  alias postgres_unload="launchctl unload -w /usr/local/Cellar/postgresql/9.1.3/homebrew.mxcl.postgresql.plist"

  # Helpers for manipulating the OSX clipboard
  alias gpaste="pbpaste | perl -pe 's/\r\n|\r/\n/g'"
  alias pbconvert="pbpaste | perl -pe 's/\r\n|\r/\n/g' | pbcopy"
  alias pbsort="pbpaste | sort | pbcopy"
  # QuickLook stuff
  alias ql='qlmanage -p'
  alias quicklook='qlmanage -p'
  alias spotlighter='mdfind -onlyin `pwd`'
  alias top='TERM=vt100 top'
  # Sound.
  alias stfu="osascript -e 'set volume output muted true'"
  alias mute="osascript -e 'set volume output muted true'"
  alias unmute="osascript -e 'set volume output muted false'"
else
  alias cputop="top -o cpu"
  alias l-d="ls -lad"
  alias l="ls -la"
  alias ll="ls -la | less"
fi

if [[ "$(uname -s)" == "Linux" ]]; then
  # we're on linux
  alias l-d="ls -lFaGd"
  alias l="ls -laFG"
  alias ll="ls -lFa | TERM=vt100 less"
fi

export CVS_RSH=ssh

alias historysummary="history|awk '{a[\$2]++} END{for(i in a){printf \"%5d\t%s\n\",a[i],i}}'|sort -rn|head"

# I really like vim.
if [ -x /bin/vim ]; then
    alias vi="/bin/vim"
    alias vim="/bin/vim"
    export EDITOR='/bin/vim'
fi

if [ -x /usr/bin/vim ]; then
    alias vi="/usr/bin/vim"
    alias vim="/usr/bin/vim"
    export EDITOR='/usr/bin/vim'
fi

# MacPorts has a newer vim than Apple ships
if [ -x /opt/local/bin/vim ]; then
    alias vim='/opt/local/bin/vim'
    alias vi="/opt/local/bin/vim"
    export EDITOR='/opt/local/bin/vim'
fi

# So does brew
if [ -x /usr/local/bin/vim ]; then
    alias vim='/usr/local/bin/vim'
    alias vi="/usr/local/bin/vim"
    export EDITOR="/usr/local/bin/vim"
fi

export VISUAL=${EDITOR}

# Clean up files that have the wrong line endings
alias mac2unix="tr '\015' '\012'"
alias unix2mac="tr '\012' '\015'"

alias ..="cd .."

# A couple of different external IP lookups depending on which is down.
alias external_ip="curl -s icanhazip.com"
alias myip="dig +short myip.opendns.com @resolver1.opendns.com"

# Show laptop's IP addresses
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"

alias reattach='screen -r'

# Pass our credentials by default
alias ssh="ssh -A"
alias ssh_unkeyed="/usr/bin/ssh"
alias ssh_no_hostchecks="ssh -A -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

# strip color codes from commands that insist on spewing them so we can
# pipe them into files cleanly
alias stripcolors='sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"'

# If I don't want to continue a download I can always delete the incomplete
# fragment
alias wget="wget -c"

# Dump the last 20 history entries
alias zh='fc -l -d -D'

# My typical tyops.
alias gerp='grep'
alias grep-i='grep -i'
alias grep='GREP_COLOR="1;37;41" LANG=C grep --color=auto'
alias grepi='grep -i'
alias knfie='knife'
alias maek='make'
alias psax='ps ax'
alias pswax='ps wax'
alias psxa='ps ax'
alias raek='rake'
alias tartvf="tar tvf"
alias tartvzf="tar tvzf"
alias tarxvf="tar xvf"

# from cads
ff() { find . -type f -iname '*'$*'*' -ls ; }

# Find crap in that enormous command history file
function hgrep40 {
  history | grep -i "$@" | tail -40
}

function hgrep {
  history | grep -i "$@" | tail -20
}

function hgrep_full {
  history | grep -i "$@" | sort | uniq
}

# From Dan Ryan's blog - http://danryan.co/using-antigen-for-zsh.html
man() {
  env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
      man "$@"
}

# from commandlinefu.com
function watch() { t=$1; shift; while test :; do clear; date=$(date); echo -e "Every $ts: $@ \t\t\t\t $date"; $@; sleep $t; done }

function cleanxmlclip {
    pbpaste | tidy -xml -wrap 0 | pbcopy
}

# scp file to machine you're sshing into this machine from
function mecp () {
    scp "$@" ${SSH_CLIENT%% *}:~/Downloads/;
}

function calc() {
    awk "BEGIN{ print $* }" ;
}

function procs_for_path() {
    for pid in $(lsof "$*" | cut -d' ' -f 3 | sort | uniq); do ps -f -p $pid; done
}

function pledit() { # plist editor.
  if [ $# -ne 1 ]; then
    echo -e "pledit: Edit Apple plist file\nusage: pledit plist_filename"
  else
    sudo plutil -convert xml1 ${1}; # convert the binary file to xml 
    sudo ${EDITOR} ${1}; # use the default editor
    sudo plutil -convert binary1 ${1} # convert it back to binary
  fi
}

# begin sysadvent2011 functions
function _awk_col() {
      echo "$1" | egrep -v '^[0-9]+$' || echo "\$$1"
}

function sum() {
      [ "${1#-F}" != "$1" ] && SP=${1} && shift
          [ "$#" -eq 0 ] && set -- 0
              key="$(_awk_col "$1")"
                  awk $SP "{ x+=$key } END { printf(\"%d\n\", x) }"
}

function sumby() {
      [ "${1#-F}" != "$1" ] && SP=${1} && shift
          [ "$#" -lt 0 ] && set -- 0 1
              key="$(_awk_col "$1")"
                  val="$(_awk_col "$2")"
                      awk $SP "{ a[$key] += $val } END { for (i in a) { printf(\"%d %s\\n\", a[i], i) } }"
}

function countby() {
      [ "${1#-F}" != "$1" ] && SP=${1} && shift
          [ "$#" -eq 0 ] && set -- 0
              key="$(_awk_col "$1")"
                  awk $SP "{ a[$key]++ } END { for (i in a) { printf(\"%d %s\\n\", a[i], i) } }"
}
# end sysadvent

# ssh helper
function rmhost () {
    perl -i -ne "print unless $1 .. $1" ~/.ssh/known_hosts;
}

get_nr_jobs() {
  jobs | wc -l
}

get_load() {
  uptime | awk '{print $11}' | tr ',' ' '
}

function bash_repeat() {
  n=$1
  shift
  while [ $(( n -= 1 )) -ge 0 ]
  do
      "$@"
  done
}

# Deal with various stupidities

# thanks so much for being a tard, fink
if [ -d /sw/bin ];then
  alias ldapsearch=/usr/bin/ldapsearch
fi

function authme {
  ssh "$1" 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys' \
  < ~/.ssh/id_dsa.pub
}

function mtr_url {
  host=`ruby -ruri -e "puts (URI.parse('$1').host or '$1')"`
  sudo mtr -t $host
}

function jsoncurl() {
  curl "$@" | python -m json.tool
}

#
# recursively touch, e.g. touch + mkdir -p
# so files can easily be created at depth
#
canhaz () {
  mkdir -p -- "${1%/*}" && touch -- "$1"
}

pong() {
    ping -c 10 "$@"
}

fix_tmux_ssh_agent() {
  for key in SSH_AUTH_SOCK SSH_CONNECTION SSH_CLIENT; do
    if (tmux show-environment | grep "^${key}" > /dev/null); then
      value=`tmux show-environment | grep "^${key}" | sed -e "s/^[A-Z_]*=//"`
      export ${key}="${value}"
    fi
  done
}

if [ -f /usr/bin/vagrant ]; then
  alias vagrant='/usr/bin/vagrant'
fi

show_terminal_colors() {
  for i in {0..255} ; do
    printf "\x1b[38;5;${i}mcolour${i}\n"
  done
}

# Use brew versions if present
if [ -x /usr/local/bin/mysql/bin/mysql ]; then
  alias mysql="/usr/local/mysql/bin/mysql"
fi

if [ -x /usr/local/bin/mysql/bin/mysqladmin ]; then
  alias mysqladmin="/usr/local/mysql/bin/mysqladmin"
fi

# batch change extension
chgext() {
  for file in *.$1 ; do mv $file `echo $file | sed "s/\(.*\.\)$1/\1$2/"` ; done
}
